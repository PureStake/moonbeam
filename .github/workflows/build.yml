name: Build

# Only executes when the checks are passing
on:
  workflow_run:
    workflows: ["Check Formatting"]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      RUSTC: ${{ steps.get-rust-versions.outputs.rustc }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache Rust dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node/standalone/target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build
      - uses: actions-rs/toolchain@v1
        with:
          target: wasm32-unknown-unknown
          # Toolchain is autodetected from `rust-toolchain` file
          # https://github.com/actions-rs/toolchain#the-toolchain-file
          #toolchain: ${{ env.WASM_BUILD_TOOLCHAIN }}
          default: true
      - id: get-rust-versions
        run: |
          echo "::set-output name=rustc::$(rustc --version)"
      - name: Build Parachain Node
        run: cargo build --release --verbose --all
      - name: Build Standalone Node
        run: |
          cd node/standalone
          cargo build --release --verbose --all
      - name: Run tests
        run: cargo test --release --verbose --all
      - name: Typescript tests (against standalone node)
        run: |
          cd tests
          npm install
          BINARY_PATH='../node/standalone/target/release/moonbase-standalone' npm run test;
      - name: Save parachain binary
        run: |
          mkdir -p build/alphanet
          mkdir -p build/standalone
          cp target/release/moonbase-alphanet build/alphanet/moonbase-alphanet;
          cp node/standalone/target/release/moonbase-standalone build/standalone/moonbase-standalone;
      - name: Upload moonbase-alphanet node
        uses: actions/upload-artifact@v2
        with:
          name: moonbase-alphanet
          path: build/alphanet
      - name: Upload moonbase-standalone node
        uses: actions/upload-artifact@v2
        with:
          name: moonbase-standalone
          path: build/standalone

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: ["build", "generate-parachain-specs"]
    if: needs.get-tag-version.outputs.tag-exists == 1
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: moonbeam
      - name: Set up Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Generate release text
        env:
          RUSTC: ${{ needs.build.outputs.rustc }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gem install changelogerator git toml
          ruby $GITHUB_WORKSPACE/moonbeam/scripts/github/generate_release_text.rb | tee release_text.md
      - name: Create draft release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Moonbase Alphanet ${{ github.ref }}
          body_path: ./release_text.md
          draft: true

  publish-runtimes:
    runs-on: ubuntu-latest
    needs: ["publish-draft-release"]
    if: needs.get-tag-version.outputs.tag-exists == 1
    strategy:
      matrix:
        runtime: ["moonbase-alphanet"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: moonbase-alphanet
          path: build/alphanet
      - name: Set up Ruby 2.7
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Get runtime version
        id: get-runtime-ver
        run: |
          runtime_ver="$(ruby -e 'require "./scripts/github/lib.rb"; puts get_runtime("${{ matrix.runtime }}")')"
          echo "::set-output name=runtime_ver::$runtime_ver"
      - name: Upload ${{ matrix.runtime }} wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-runtime.wasm
          asset_name: ${{ matrix.runtime }}-runtime-v${{ steps.get-runtime-ver.outputs.runtime_ver }}.wasm
          asset_content_type: application/wasm
      - name: Upload ${{ matrix.runtime }} node
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}
          asset_name: ${{ matrix.runtime }}
          asset_content_type: application/octet-stream
      - name: Upload ${{ matrix.runtime }} specs plain
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-specs-plain.json
          asset_name: ${{ matrix.runtime }}-specs-plain.json
          asset_content_type: application/json
      - name: Upload ${{ matrix.runtime }} specs raw
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-specs-raw.json
          asset_name: ${{ matrix.runtime }}-specs-raw.json
          asset_content_type: application/json
      - name: Upload ${{ matrix.runtime }} genesis
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.publish-draft-release.outputs.asset_upload_url }}
          asset_path: build/alphanet/${{ matrix.runtime }}-genesis.txt
          asset_name: ${{ matrix.runtime }}-genesis.txt
          asset_content_type: text/plain
